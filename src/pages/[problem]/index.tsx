import Head from "next/head";
import { LoadingSkeleton } from "~/components/loader";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "~/components/ui/table";
import { api } from "~/utils/api";
import { useRouter } from 'next/router';
import { Badge } from "~/components/ui/badge";
import Link from "next/link";
import { objectToColor } from "~/utils/utils";
import { Card } from "~/components/ui/card";

export default function ProblemPage() {

  const router = useRouter();
  const { pathname, query } = router;

  const fullPath = pathname.split('/').map((segment) =>
    segment.startsWith('[') && segment.endsWith(']') ? query[segment.slice(1, -1)] : segment
  ).join('/'); const { data, isLoading, error } = api.layout.getProblemMap.useQuery();

  if (isLoading) return <LoadingSkeleton />;
  if (error) return <div>Error loading problems</div>;
  if (!data) return <div>Error loading problems</div>;

  const problemSet = data.problems.filter((problem) => problem.path === fullPath);

  if (problemSet.length === 0) return <div>Problem not found</div>;

  return (
    <>
      <Head>
        <title>AlgoHelper</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center px-4 py-8">
        <div className="container flex flex-col items-center justify-center gap-4 py-8">
          <h1 className="text-2xl font-bold text-center sm:text-3xl">{problemSet[0]!.name}</h1>
        </div>
        <Card className="w-full overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Problem</TableHead>
                <TableHead>Difficulty</TableHead>
                <TableHead>Solution</TableHead>
                <TableHead>Status</TableHead>
              </TableRow>
            </TableHeader>
            {problemSet[0]!.problemSets!.map((problem) => (
              <TableBody key={problem.id}>
                <TableRow>
                  <TableCell className="font-semibold">
                    <Link href={problem.leetcodeUrl}>
                      {problem.name} &rarr;
                    </Link>
                  </TableCell>
                  <TableCell>
                    <Badge className={objectToColor(problem.rating)}>{problem.rating}</Badge>
                  </TableCell>
                  <TableCell>
                    <Link href={fullPath + problem.solutionPath}
                    // className={buttonVariants({ size: "sm" })}>
                    >
                      Solution &rarr;
                    </Link>
                  </TableCell>
                  <TableCell>
                    <Badge className={objectToColor(problem.status)}>{problem.status}</Badge>
                  </TableCell>
                </TableRow>
              </TableBody>
            ))}
          </Table>
        </Card>
      </main >
    </>
  );
}
